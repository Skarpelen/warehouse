@page "/shipments/form/{Id:guid}"
@using Warehouse.Client.Services
@using Warehouse.Shared.DTO
@using Warehouse.Shared.Filters
@using Warehouse.Shared
@inject IApiAccess Api
@inject NavigationManager Nav
@inject IToastService Toast

<PageTitle>Отгрузка</PageTitle>

<h3>Отгрузка</h3>

@if (_isLoading)
{
    <MudText>Загрузка...</MudText>
}
else
{
    <MudForm @ref="_form">
        <MudStack Row="true" Spacing="2" Class="mb-4">
            @if (IsEditMode)
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="Save"
                           Disabled="_isSaving">
                    Сохранить
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Success"
                           OnClick="SaveAndSign"
                           Disabled="_isSaving">
	                Сохранить и подписать
                </MudButton>

                @if (Id != Guid.Empty && _status != ShipmentStatus.Signed)
                {
	                <MudButton Variant="Variant.Outlined"
	                           Color="Color.Error"
	                           OnClick="Delete"
	                           Disabled="_isSaving">
		                Удалить
	                </MudButton>
                }
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           OnClick="Revoke"
                           Disabled="_isSaving">
                    Отозвать
                </MudButton>
            }
        </MudStack>

        <MudPaper Class="pa-4 mb-4">
            <MudTextField T="string"
                          For="@(() => _number)"
                          Label="Номер"
                          @bind-Value="_number"
                          Disabled="!IsEditMode"
                          Required="true"
                          Immediate="true" />

            <MudSelect T="Guid"
                       For="@(() => _clientId)"
                       Label="Клиент"
                       @bind-Value="_clientId"
                       Disabled="!IsEditMode"
                       Dense="true"
                       Required="true">
                <MudSelectItem T="Guid" Value="Guid.Empty">Выбрать</MudSelectItem>
                @foreach (var client in _clients)
                {
                    <MudSelectItem T="Guid" Value="@client.Id">@client.Name</MudSelectItem>
                }
            </MudSelect>

            <MudDatePicker For="@(() => _date)"
                           Label="Дата"
                           @bind-Date="_date"
                           Disabled="!IsEditMode"
                           Required="true" />
        </MudPaper>

        <MudPaper Class="pa-4">
            @if (IsEditMode)
            {
                <MudTable Items="_items" Dense="true">
                    <HeaderContent>
                        <MudTh>Ресурс</MudTh>
                        <MudTh>Ед. изм.</MudTh>
                        <MudTh>Количество</MudTh>
                        <MudTh>Доступно</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Resource.Name</MudTd>
                        <MudTd>@context.Unit.Name</MudTd>
                        <MudTd>
                            <MudNumericField T="decimal"
                                             For="@(() => context.Quantity)"
                                             @bind-Value="context.Quantity"
                                             Immediate="true" />
                        </MudTd>
                        <MudTd>@context.Available</MudTd>
                    </RowTemplate>
                    <NoRecordsContent>Нет позиций</NoRecordsContent>
                </MudTable>
            }
            else
            {
                <MudTable Items="_items" Dense="true">
                    <HeaderContent>
                        <MudTh>Ресурс</MudTh>
                        <MudTh>Ед. изм.</MudTh>
                        <MudTh>Количество</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Resource.Name</MudTd>
                        <MudTd>@context.Unit.Name</MudTd>
                        <MudTd>@context.Quantity</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private string _number = string.Empty;
    private DateTime? _date = DateTime.Today;
    private Guid _clientId;
    private List<ShipmentItemDTO> _items = new();
    private IEnumerable<ClientDTO> _clients = Array.Empty<ClientDTO>();
    private ShipmentStatus _status = ShipmentStatus.Draft;
    private bool _isLoading = true;
    private bool _isSaving;
    private MudForm _form = default!;

    private bool IsEditMode => Id == Guid.Empty || _status != ShipmentStatus.Signed;

    protected override async Task OnInitializedAsync()
    {
        var clientsRes = await Api.GetClients(false);

        if (clientsRes.Result == ResultCode.Ok && clientsRes.Response is not null)
        {
            _clients = clientsRes.Response;
        }

        ShipmentDocumentDTO? dto = null;

        if (Id != Guid.Empty)
        {
            var shipRes = await Api.GetShipment(Id);

            if (shipRes.Result == ResultCode.Ok && shipRes.Response is not null)
            {
                dto = shipRes.Response;
                _number = dto.Number;
                _clientId = dto.ClientId;
                _date = dto.Date.DateTime;
                _status = dto.Status;

                if (_status != ShipmentStatus.Draft)
                {
                    _items = dto.Items.ToList();
                    _isLoading = false;
                    return;
                }
            }
        }

        var balRes = await Api.GetAllBalances(new BalanceFilter());

        var balances = balRes.Result == ResultCode.Ok && balRes.Response is not null
            ? balRes.Response
            : Array.Empty<BalanceDTO>();

        if (Id == Guid.Empty)
        {
            _items = balances
                .Select(b => new ShipmentItemDTO
                {
                    ResourceId = b.ResourceId,
                    UnitOfMeasureId = b.UnitOfMeasureId,
                    Quantity = 0m,
                    Resource = b.Resource,
                    Unit = b.Unit,
                    Available = b.Quantity
                })
                .ToList();
        }
        else
        {
            var saved = dto!.Items
                .ToDictionary(
                    i => (i.ResourceId, i.UnitOfMeasureId),
                    i => i.Quantity);

            _items = balances
                .Select(b => new ShipmentItemDTO
                {
                    ResourceId = b.ResourceId,
                    UnitOfMeasureId = b.UnitOfMeasureId,
                    Quantity = saved.TryGetValue((b.ResourceId, b.UnitOfMeasureId), out var q) ? q : 0m,
                    Resource = b.Resource,
                    Unit = b.Unit,
                    Available = b.Quantity
                })
                .ToList();
        }

        _isLoading = false;
    }

    private async Task Save()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Toast.ShowError("Пожалуйста, исправьте ошибки в форме");
            return;
        }

        _isSaving = true;

        var dto = new ShipmentDocumentDTO
        {
            Id = Id,
            Number = _number,
            ClientId = _clientId,
            Date = _date!.Value,
            Items = _items
        };

        ResultCode result;

        if (Id == Guid.Empty)
        {
            var createRes = await Api.CreateShipment(dto);
            result = createRes.Result;
        }
        else
        {
            var updateRes = await Api.UpdateShipment(dto);
            result = updateRes.Result;
        }

        if (result == ResultCode.Ok)
        {
            Nav.NavigateTo("/shipments");
        }
        else
        {
            Toast.ShowError("Ошибка при сохранении");
        }

        _isSaving = false;
    }

    private async Task SaveAndSign()
    {
	    await _form.Validate();
	    if (!_form.IsValid)
	    {
		    Toast.ShowError("Пожалуйста, исправьте ошибки в форме");
		    return;
	    }

	    _isSaving = true;

	    var dto = new ShipmentDocumentDTO
	    {
		    Id = Id,
		    Number = _number,
		    ClientId = _clientId,
		    Date = _date!.Value,
		    Items = _items
	    };

	    ResultCode saveResult;

	    if (Id == Guid.Empty)
	    {
		    var createRes = await Api.CreateShipment(dto);
		    saveResult = createRes.Result;

		    if (saveResult == ResultCode.Ok)
		    {
			    Id = createRes.Response.Id;
		    }
	    }
	    else
	    {
		    var updateRes = await Api.UpdateShipment(dto);
		    saveResult = updateRes.Result;
	    }

	    if (saveResult != ResultCode.Ok)
	    {
		    Toast.ShowError("Ошибка при сохранении");
		    _isSaving = false;
		    return;
	    }

	    var signRes = await Api.SignShipment(Id);

	    if (signRes.Result != ResultCode.Ok)
	    {
		    Toast.ShowError("Ошибка при подписи");
		    _isSaving = false;
		    return;
	    }

	    Nav.NavigateTo("/shipments");

	    _isSaving = false;
    }

    private async Task Delete()
    {
	    _isSaving = true;

	    var deleteRes = await Api.DeleteShipment(Id);

	    if (deleteRes.Result == ResultCode.Ok)
	    {
		    Nav.NavigateTo("/shipments");
	    }
	    else
	    {
		    Toast.ShowError("Ошибка при удалении");
	    }

	    _isSaving = false;
    }

    private async Task Revoke()
    {
        if (Id != Guid.Empty)
        {
            await Api.RevokeShipment(Id);
            Nav.NavigateTo("/shipments");
        }
    }
}
