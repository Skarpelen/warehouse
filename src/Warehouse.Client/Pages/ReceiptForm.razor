@page "/receipts/form/{Id:guid}"
@using Warehouse.Client.Services
@using Warehouse.Shared.DTO
@inject IApiAccess Api
@inject IToastService Toast
@inject NavigationManager Nav

<PageTitle>Поступление</PageTitle>

<h3>Поступление</h3>

<MudForm @ref="_form">
	<MudStack Row="true" Spacing="2" Class="mb-4">
		<MudButton Variant="Variant.Filled"
		           OnClick="Save"
		           Disabled="_isSaving">
			Сохранить
		</MudButton>
	</MudStack>
    
	@if (Id != Guid.Empty)
	{
		<MudButton Variant="Variant.Outlined"
		           Color="Color.Error"
		           OnClick="Delete"
		           Disabled="_isSaving">
			Удалить
		</MudButton>
	}

	<MudPaper Class="pa-4 mt-4">
        <MudTextField T="string"
                      For="@(() => _number)"
                      Label="Номер"
                      @bind-Value="_number"
                      Required="true"
                      Immediate="true" />
        <MudDatePicker For="@(() => _date)"
                       Label="Дата"
                       @bind-Date="_date"
                       Required="true" />
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudTable T="SupplyItemDTO"
                  Items="@_items"
                  Dense="true">
            <HeaderContent>
                <MudTh>
                    <MudButton Variant="Variant.Text"
                               Color="Color.Success"
                               OnClick="AddRow"
                               StartIcon="@Icons.Material.Filled.Add" />
                </MudTh>
                <MudTh>Ресурс</MudTh>
                <MudTh>Единица измерения</MudTh>
                <MudTh>Количество</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudButton Variant="Variant.Text"
                               Color="Color.Error"
                               OnClick="@(() => RemoveRow(context))"
                               StartIcon="@Icons.Material.Filled.Close" />
                </MudTd>
                <MudTd>
                    <MudSelect T="Guid"
                               For="@(() => context.ResourceId)"
                               @bind-Value="context.ResourceId"
                               Dense="true"
                               Required="true">
                        <MudSelectItem T="Guid" Value="Guid.Empty">Выбрать</MudSelectItem>
                        @foreach (var r in _resources)
                        {
                            <MudSelectItem T="Guid" Value="@r.Id">@r.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="Guid"
                               For="@(() => context.UnitOfMeasureId)"
                               @bind-Value="context.UnitOfMeasureId"
                               Dense="true"
                               Required="true">
                        <MudSelectItem T="Guid" Value="Guid.Empty">Выбрать</MudSelectItem>
                        @foreach (var u in _units)
                        {
                            <MudSelectItem T="Guid" Value="@u.Id">@u.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudNumericField T="decimal"
                                     For="@(() => context.Quantity)"
                                     Label="Количество"
                                     @bind-Value="context.Quantity"
                                     Required="true"
                                     Min="1"
                                     Immediate="true" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>Нет позиций</NoRecordsContent>
        </MudTable>
    </MudPaper>
</MudForm>

@code {
    [Parameter] public Guid Id { get; set; }

    private string _number = string.Empty;
    private DateTime? _date = DateTime.Today;
    private List<SupplyItemDTO> _items = new();
    private IEnumerable<ResourceDTO> _resources = new List<ResourceDTO>();
    private IEnumerable<UnitDTO> _units = new List<UnitDTO>();
    private bool _isSaving;
    private MudForm _form = default!;

    protected override async Task OnInitializedAsync()
    {
        var resResult = await Api.GetAllResources(false);

        if (resResult.Result == ResultCode.Ok && resResult.Response != null)
        {
            _resources = resResult.Response;
        }

        var unitResult = await Api.GetAllUnits(false);

        if (unitResult.Result == ResultCode.Ok && unitResult.Response != null)
        {
            _units = unitResult.Response;
        }

        if (Id != Guid.Empty)
        {
            var supRes = await Api.GetSupply(Id);

            if (supRes.Result == ResultCode.Ok && supRes.Response != null)
            {
                var dto = supRes.Response;
                _number = dto.Number;
                _date = dto.Date.DateTime;
                _items = dto.Items
                             .Select(i => new SupplyItemDTO
                             {
                                 ResourceId = i.ResourceId,
                                 Resource = i.Resource,
                                 UnitOfMeasureId = i.UnitOfMeasureId,
                                 Unit = i.Unit,
                                 Quantity = i.Quantity
                             })
                             .ToList();
            }
            else
            {
                Toast.ShowError("Не удалось загрузить поступление");
            }
        }
    }

    private void AddRow()
    {
        _items.Add(new SupplyItemDTO
        {
            ResourceId = Guid.Empty,
            UnitOfMeasureId = Guid.Empty,
            Quantity = 0
        });
    }

    private void RemoveRow(SupplyItemDTO item)
    {
        _items.Remove(item);
    }

    private async Task Save()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Toast.ShowError("Пожалуйста, исправьте ошибки в форме");
            return;
        }

        _isSaving = true;

        var dto = new SupplyDocumentDTO
        {
            Id = Id,
            Number = _number,
            Date = _date!.Value,
            Items = _items
        };

        var result = Id == Guid.Empty
            ? (await Api.CreateSupply(dto)).Result
            : (await Api.UpdateSupply(dto)).Result;

        if (result == ResultCode.Ok)
        {
            Nav.NavigateTo("/receipts");
        }
        else
        {
            Toast.ShowError("Ошибка при сохранении");
        }

        _isSaving = false;
    }

    private async Task Delete()
    {
        _isSaving = true;

        var deleteRes = await Api.DeleteSupply(Id);

        if (deleteRes.Result == ResultCode.Ok)
        {
            Nav.NavigateTo("/receipts");
        }
        else
        {
            Toast.ShowError("Ошибка при удалении");
        }

        _isSaving = false;
    }
}
