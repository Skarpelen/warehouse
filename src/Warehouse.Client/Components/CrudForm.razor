@using Warehouse.Client.Services
@typeparam TDto
@inject NavigationManager Nav
@inject IToastService Toast

<PageTitle>@Title</PageTitle>
<h3>@Title</h3>

@if (_editContext is null)
{
    <MudText>Загрузка...</MudText>
}
else
{
    <MudForm @ref="_form">
        <EditForm EditContext="@_editContext"
                  OnValidSubmit="HandleValidSubmit"
                  OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <MudStack Row="true" Spacing="2" Class="mb-4">
                <MudButton Variant="Variant.Filled"
                           ButtonType="ButtonType.Submit"
                           Disabled="_isBusy">
                    Сохранить
                </MudButton>

                @if (Id != Guid.Empty)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Error"
                               OnClick="HandleDelete"
                               Disabled="_isBusy">
                        Удалить
                    </MudButton>
                    @if (!((dynamic)Model).IsArchived)
                    {
                        <MudButton Variant="Variant.Outlined"
                                   OnClick="HandleArchive"
                                   Disabled="_isBusy">
                            В архив
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Success"
                                   OnClick="HandleUnarchive"
                                   Disabled="_isBusy">
                            В работу
                        </MudButton>
                    }
                }
            </MudStack>

            <MudPaper Class="pa-4">
                @Template(Model)
            </MudPaper>
        </EditForm>
    </MudForm>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public Guid Id { get; set; }
    [Parameter] public Func<Guid, Task<(ResultCode, TDto?)>> LoadFunc { get; set; } = _ => throw new InvalidOperationException();
    [Parameter] public Func<TDto, Task<ActionResult>> SaveFunc { get; set; } = _ => throw new InvalidOperationException();
    [Parameter] public Func<Guid, Task<ActionResult>> DeleteFunc { get; set; } = _ => throw new InvalidOperationException();
    [Parameter] public Func<Guid, Task<ActionResult>> ArchiveFunc { get; set; } = _ => throw new InvalidOperationException();
    [Parameter] public Func<Guid, Task<ActionResult>> UnarchiveFunc { get; set; } = _ => throw new InvalidOperationException();
    [Parameter] public string ReturnUrl { get; set; } = string.Empty;
    [Parameter] public RenderFragment<TDto> Template { get; set; } = _ => null!;

    private TDto Model = default!;
    private EditContext _editContext = default!;
    private MudForm _form = default!;
    private bool _isBusy;

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            var (code, data) = await LoadFunc(Id);

            if (code == ResultCode.Ok && data is not null)
            {
                Model = data;
            }
            else
            {
                Toast.ShowError($"Не удалось загрузить {Title.ToLower()}");
            }
        }
        else
        {
            Model = Activator.CreateInstance<TDto>()!;
        }

        _editContext = new EditContext(Model);
    }

    private async Task HandleValidSubmit()
    {
        _isBusy = true;
        var result = await SaveFunc(Model);

        if (result.Result == ResultCode.Ok)
        {
            Nav.NavigateTo(ReturnUrl);
        }
        else
        {
            Toast.ShowError(result.Error ?? "Ошибка при сохранении");
        }

        _isBusy = false;
    }

    private void HandleInvalidSubmit(EditContext ctx)
    {
        var messages = ctx.GetValidationMessages()
                          .Distinct()
                          .ToList();
        Toast.ShowError(string.Join("\n", messages));
    }

    private async Task HandleDelete()
    {
        if (Id == Guid.Empty)
        {
            return;
        }

        _isBusy = true;
        var result = await DeleteFunc(Id);

        if (result.Result == ResultCode.Ok)
        {
            Nav.NavigateTo(ReturnUrl);
        }
        else
        {
            Toast.ShowError(result.Error ?? "Ошибка при удалении");
        }

        _isBusy = false;
    }

    private async Task HandleArchive()
    {
        if (Id == Guid.Empty)
        {
            return;
        }

        _isBusy = true;
        var result = await ArchiveFunc(Id);

        if (result.Result == ResultCode.Ok)
        {
            Nav.NavigateTo($"{ReturnUrl}/2");
        }
        else
        {
            Toast.ShowError(result.Error ?? "Ошибка при архивации");
        }

        _isBusy = false;
    }

    private async Task HandleUnarchive()
    {
        if (Id == Guid.Empty)
        {
            return;
        }

        _isBusy = true;
        var result = await UnarchiveFunc(Id);

        if (result.Result == ResultCode.Ok)
        {
            Nav.NavigateTo($"{ReturnUrl}/1");
        }
        else
        {
            Toast.ShowError(result.Error ?? "Ошибка при разархивации");
        }

        _isBusy = false;
    }
}
