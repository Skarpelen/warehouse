@using Warehouse.Client.Services
@using Warehouse.Shared.DTO
@using Warehouse.Shared.Filters
@inject IApiAccess Api

<MudPaper Class="pa-4 mb-4">
	<MudGrid>
		<MudItem xs="12" sm="6" md="3">
			<MudText Typo="Typo.subtitle2">Период</MudText>
			<MudStack Row="true" Spacing="1">
				<MudDatePicker Editable="true" @bind-Date="_dateFrom" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" />
				<MudDatePicker Editable="true" @bind-Date="_dateTo" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" />
			</MudStack>
		</MudItem>
		<MudItem xs="12" sm="6" md="3">
			<MudText Typo="Typo.subtitle2">Номер отгрузки</MudText>
			<MudSelect T="string" @bind-SelectedValues="_selectedNumbers" MultiSelection="true" Dense="true">
				@foreach (var num in _numbers)
				{
					<MudSelectItem T="string" Value="@num">@num</MudSelectItem>
				}
			</MudSelect>
		</MudItem>
		<MudItem xs="12" sm="6" md="2">
			<MudSelect T="ClientDTO" Label="Клиент" @bind-SelectedValues="_selectedClients" MultiSelection="true" Dense="true">
				@foreach (var c in _clients)
				{
					<MudSelectItem T="ClientDTO" Value="@c">@c.Name</MudSelectItem>
				}
			</MudSelect>
		</MudItem>
		<MudItem xs="12" sm="6" md="2">
			<MudSelect T="ResourceDTO" Label="Ресурс" @bind-SelectedValues="_selectedResources" MultiSelection="true" Dense="true">
				@foreach (var r in _resources)
				{
					<MudSelectItem T="ResourceDTO" Value="@r">@r.Name</MudSelectItem>
				}
			</MudSelect>
		</MudItem>
		<MudItem xs="12" sm="6" md="2">
			<MudSelect T="UnitDTO" Label="Ед. измерения" @bind-SelectedValues="_selectedUnits" MultiSelection="true" Dense="true">
				@foreach (var u in _units)
				{
					<MudSelectItem T="UnitDTO" Value="@u">@u.Name</MudSelectItem>
				}
			</MudSelect>
		</MudItem>
		<MudItem xs="12">
			<MudStack Row="true" Spacing="2" Class="mt-4">
				<MudButton Variant="Variant.Filled" OnClick="Apply" Disabled="_isLoading">Применить</MudButton>
				<MudButton Variant="Variant.Filled" OnClick="() => OnAdd.InvokeAsync(Guid.Empty)">Добавить</MudButton>
			</MudStack>
		</MudItem>
	</MudGrid>
</MudPaper>

@code {
	[Parameter] public EventCallback<DocumentFilter> OnApply { get; set; }
	[Parameter] public EventCallback<Guid> OnAdd { get; set; }

	private DateTime? _dateFrom = DateTime.Today.AddDays(-7);
	private DateTime? _dateTo = DateTime.Today.AddDays(7);
	private IEnumerable<string> _selectedNumbers = new List<string>();
	private IEnumerable<ClientDTO> _selectedClients = new List<ClientDTO>();
	private IEnumerable<ResourceDTO> _selectedResources = new List<ResourceDTO>();
	private IEnumerable<UnitDTO> _selectedUnits = new List<UnitDTO>();

	private IEnumerable<string> _numbers = Array.Empty<string>();
	private IEnumerable<ClientDTO> _clients = Array.Empty<ClientDTO>();
	private IEnumerable<ResourceDTO> _resources = Array.Empty<ResourceDTO>();
	private IEnumerable<UnitDTO> _units = Array.Empty<UnitDTO>();

	private bool _isLoading;

	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;

		var docRes = await Api.GetAllShipments(new DocumentFilter());

		if (docRes.Result == ResultCode.Ok && docRes.Response is not null)
		{
			_numbers = docRes.Response.Select(x => x.Number).Distinct();
		}

		var clientRes = await Api.GetClients(false);

		if (clientRes.Result == ResultCode.Ok && clientRes.Response is not null)
		{
			_clients = clientRes.Response;
		}

		var resRes = await Api.GetAllResources(false);

		if (resRes.Result == ResultCode.Ok && resRes.Response is not null)
		{
			_resources = resRes.Response;
		}

		var unitRes = await Api.GetAllUnits(false);

		if (unitRes.Result == ResultCode.Ok && unitRes.Response is not null)
		{
			_units = unitRes.Response;
		}

		_isLoading = false;
	}

	private async Task Apply()
	{
		var filter = new DocumentFilter
			{
				DateFrom = _dateFrom,
				DateTo = _dateTo,
				Numbers = _selectedNumbers.ToList(),
				ClientIds = _selectedClients.Select(c => c.Id).ToList(),
				ResourceIds = _selectedResources.Select(r => r.Id).ToList(),
				UnitIds = _selectedUnits.Select(u => u.Id).ToList()
			};

		await OnApply.InvokeAsync(filter);
	}
}