@using Warehouse.Client.Services
@using Warehouse.Shared.DTO
@using Warehouse.Shared.Filters
@inject IApiAccess Api

<MudPaper Class="pa-4 mb-4">
	<MudGrid>
		<MudItem xs="12" sm="4">
			<MudSelect T="ResourceDTO"
					   Label="Ресурс"
					   @bind-SelectedValues="_selectedResources"
					   MultiSelection="true"
					   Dense="true">
				@foreach (var resource in _resources)
				{
					<MudSelectItem T="ResourceDTO" Value="@resource">
						@resource.Name
					</MudSelectItem>
				}
			</MudSelect>
		</MudItem>

		<MudItem xs="12" sm="4">
			<MudSelect T="UnitDTO"
					   Label="Единица измерения"
					   @bind-SelectedValues="_selectedUnits"
					   MultiSelection="true"
					   Dense="true">
				@foreach (var unit in _units)
				{
					<MudSelectItem T="UnitDTO" Value="@unit">
						@unit.Name
					</MudSelectItem>
				}
			</MudSelect>
		</MudItem>

		<MudItem xs="12" sm="4" Class="d-flex align-center">
			<MudButton Variant="Variant.Filled"
					   OnClick="Apply"
					   Disabled="_isLoading">
				Применить
			</MudButton>
		</MudItem>
	</MudGrid>
</MudPaper>

@code {
	[Parameter]
	public EventCallback<BalanceFilter> OnApply { get; set; }

	private IEnumerable<ResourceDTO> _resources = new List<ResourceDTO>();
	private IEnumerable<UnitDTO> _units = new List<UnitDTO>();
	private IEnumerable<ResourceDTO> _selectedResources = new List<ResourceDTO>();
	private IEnumerable<UnitDTO> _selectedUnits = new List<UnitDTO>();
	private bool _isLoading;

	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;

		var resResult = await Api.GetAllResources(false);

		if (resResult.Result == ResultCode.Ok && resResult.Response != null)
		{
			_resources = resResult.Response;
		}

		var unitResult = await Api.GetAllUnits(false);

		if (unitResult.Result == ResultCode.Ok && unitResult.Response != null)
		{
			_units = unitResult.Response;
		}

		_isLoading = false;
	}

	private async Task Apply()
	{
		var filter = new BalanceFilter
			{
				ResourceIds = _selectedResources.Select(r => r.Id).ToList(),
				UnitIds = _selectedUnits.Select(u => u.Id).ToList()
			};

		await OnApply.InvokeAsync(filter);
	}
}
